---
- name: update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == 'Debian'
  tags:
  - install

- name: install the required dependencies (Debian) python3
  apt:
    name:
    - openssl
    - python3-boto
    - python3-openssl
    state: present
  when: ansible_os_family == 'Debian' and ansible_python_version is version('3', '>=')
  tags:
  - install

- name: install the required dependencies (Debian) python2
  apt:
    name:
    - openssl
    - python-boto
    - python-openssl
    state: present
  when: ansible_os_family == 'Debian' and ansible_python_version is version('3', '<')
  tags:
  - install

- name: install the required dependencies (Red Hat)
  yum:
    name:
    - openssl
    - python3-pip
    state: present
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version is version('8', '>=')
  tags:
  - install

- name: install the required dependencies (Red Hat) (Requires EPEL)
  yum:
    name:
    - openssl
    - python-pip
    state: present
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version is version('8', '<')
  tags:
  - install

- name: install the required dependencies (FreeBSD)
  pkgng:
    name:
    - openssl
    - "py{{ ansible_python.version.major }}{{ ansible_python.version.minor }}-boto"
    - "py{{ ansible_python.version.major }}{{ ansible_python.version.minor }}-openssl"
    state: present
  when: ansible_os_family == 'FreeBSD'
  tags:
  - install

- name: install the required dependencies (MacOS)
  homebrew:
    name:
    - openssl@1.1
    - python3
    state: present
  become: no
  when: ansible_os_family == 'Darwin'
  tags:
  - install

- name: "create the {{ ler53_cert_dir }} directory"
  file:
    path: "{{ ler53_cert_dir }}"
    state: directory
    owner: root
    mode: 0755

- name: "create the {{ ler53_account_key_dir }} directory"
  file:
    path: "{{ ler53_account_key_dir }}"
    state: directory
    owner: root
    mode: 0700

- name: "importing virtualenv tasks"
  import_tasks: virtualenv.yml
  when: ansible_os_family in ['RedHat', 'Darwin']

- name: generate the private key
  openssl_privatekey:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    size: "{{ ler53_key_size }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  tags:
  - openssl

- name: check consistency of private key
  openssl_privatekey_info:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    check_consistency: yes
  register: result_privatekey
  tags:
  - openssl

- name: generate the CSR
  openssl_csr:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    privatekey_path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    common_name: "{{ ler53_cert_common_name }}"
    key_usage: "{{ ler53_cert_key_usages }}"
    subject_alt_name: "DNS:{{ ler53_cert_common_name }}{{ ',DNS:' + ',DNS:'.join(ler53_cert_sans) if ler53_cert_sans else '' }}"
    extended_key_usage: "{{ ler53_cert_extended_key_usages | default(omit) }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: generate_csr
  tags:
  - openssl

- name: check consistency of the CSR key
  openssl_csr_info:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
  register: result_csr
  tags:
  - openssl

- name: generate the Let's Encrypt account key
  openssl_privatekey:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    size: "{{ ler53_account_key_size }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  tags:
  - openssl

- name: check consistency of the account key
  openssl_privatekey_info:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    check_consistency: yes
  register: result_accountkey
  tags:
  - openssl

- name: delete existing certificate
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    state: absent
  when: generate_csr.changed and ler53_new_cert_when_csr_changes
  tags:
  - openssl

- name: initiate the Let's Encrypt challenge
  acme_certificate:
    acme_version: 2
    acme_directory: "{{ ler53_acme_directory }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    remaining_days: "{{ ler53_cert_remaining_days_before_renewal }}"
    terms_agreed: yes
  register: lets_encrypt_challenge

# * lets_encrypt_challenge['challenge_data_dns'] is a dict of lists.
# * lets_encrypt_challenge['challenge_data_dns'].key = "_acme-challenge.domain.com"
# * lets_encrypt_challenge['challenge_data_dns'].value = ["TXT RECORD", "TXT RECORD", "TXT RECORD"] (one TXT for each domain + SANS)
- name: create the DNS records for the challenge
  route53:
    command: create
    # If key is "_acme-challenge.domain.com" then zone will be "domain.com"
    # I tried and tried, but this doesn't support subdomains, e.g. "subdomain.domain.com"
    # If Let's encrypt decides to use a different string other than "_acme-challenge", then this breaks.
    zone: "{{ ler53_item.key | replace('_acme-challenge.', '') }}"
    hosted_zone_id: "{{ ler53_route_53_zone_id | default(omit) }}"
    record: "{{ ler53_item.key }}"
    type: TXT
    ttl: 5
    # Note: ler53_item.value is a list of TXT entries, and route53 requires every entry to be enclosed in quotes
    value: "{{ ler53_item.value | map('regex_replace', '^(.*)$', '\"\\1\"' ) | list }}"
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
    overwrite: yes
    wait: yes
  with_dict: "{{ lets_encrypt_challenge['challenge_data_dns'] | default({}) }}"
  loop_control:
    loop_var: ler53_item

- name: validate the Let's Encrypt challenge
  acme_certificate:
    acme_version: 2
    acme_directory: "{{ ler53_acme_directory }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    data: "{{ lets_encrypt_challenge }}"
    remaining_days: "{{ ler53_cert_remaining_days_before_renewal }}"
  notify: handle services
  register: lets_encrypt_validation_result

- name: set the ler53_cert_changed fact
  set_fact:
    ler53_cert_changed: "{{ lets_encrypt_validation_result.changed | bool }}"

# * lets_encrypt_challenge['challenge_data_dns'] is a dict of lists.
# * lets_encrypt_challenge['challenge_data_dns'].key = "_acme-challenge.domain.com"
# * lets_encrypt_challenge['challenge_data_dns'].value = ["TXT RECORD", "TXT RECORD", "TXT RECORD"] (one TXT for each domain + SANS)
- name: delete the DNS records for the challenge
  route53:
    command: delete
    # If key is "_acme-challenge.domain.com" then zone will be "domain.com"
    # I tried and tried, but this doesn't support subdomains, e.g. "subdomain.domain.com"
    # If Let's encrypt decides to use a different string other than "_acme-challenge", then this breaks.
    zone: "{{ ler53_item.key | replace('_acme-challenge.', '') }}"
    hosted_zone_id: "{{ ler53_route_53_zone_id | default(omit) }}"
    record: "{{ ler53_item.key }}"
    type: TXT
    ttl: 5
    # Note: ler53_item.value is a list of TXT entries, and route53 requires every entry to be enclosed in quotes
    value: "{{ ler53_item.value | map('regex_replace', '^(.*)$', '\"\\1\"' ) | list }}"
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
  with_dict: "{{ lets_encrypt_challenge['challenge_data_dns'] | default({}) }}"
  loop_control:
    loop_var: ler53_item

- name: set the cert file permissions
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: download the Let's Encrypt intermediate CA
  get_url:
    url: "{{ ler53_intermediate_download_url }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: ler53_intermediate_download_task
  when: ler53_intermediate_download | bool

- name: get content of the certificate
  command: "cat {{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
  register: ler53_certificate_content
  changed_when: false
  when: ler53_intermediate_download | bool

- name: get content of the intermediate CA
  command: "cat {{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
  register: ler53_intermediate_content
  changed_when: false
  when: ler53_intermediate_download | bool

- name: create a file with the certificate and intermediate CA concatenated
  copy:
    content: "{{ ler53_certificate_content['stdout'] + '\n' + ler53_intermediate_content['stdout'] + '\n' }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_and_intermediate_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  when: ler53_intermediate_download | bool

- name: verify the private keys and CSR
  assert:
    that:
    - result_privatekey.key_is_consistent
    - result_accountkey.key_is_consistent
    - result_csr.signature_valid
    msg: "The private keys and CSR are valid"
